{
  "name": "wundergroundnode",
  "version": "0.4.0",
  "main": "./lib/wundergroundnode.js",
  "description": "Weather Underground chainable API for nodeJS",
  "homepage": "http://www.github.com/cendrizzi/wundergroundnode",
  "keywords": [
    "weather",
    "wunderground",
    "weather underground",
    "weather.com"
  ],
  "author": {
    "name": "Clark Endrizzi"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/cendrizzi/wundergroundnode/LICENSE.txt"
    }
  ],
  "dependencies": {
    "request": "2.x",
    "limiter": "=1.0.3",
    "underscore": "1.x",
    "moment": "2.x"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "engines": {
    "node": ">=0.8.14"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cendrizzi/wundergroundnode"
  },
  "bugs": {
    "url": "https://github.com/cendrizzi/wundergroundnode/issues"
  },
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha"
  },
  "license": "ISC",
  "readme": "This is a chainable weather underground client for node.js\n\n# Install\n    npm install wundergroundnode\n    var Wunderground = require('wundergroundnode');\n    var myKey = '12312314';\n    var wunderground = new Wunderground(myKey);\n\n# How To Use\nThe syntax follows a simple pattern:\n    \n    wunderground.[resource calls(s)].request(myQuery, callback);\n    \nThe available resource calls are the following (you must include one in your request):\n\n- conditions\n- hourlyForecast\n- hourlyTenDayForecast\n- forecast\n- almanac\n- yesterday\n- geolookup\n- astronomy\n- alerts (thanks to drewlander for this)\n\nThe documentation for each resource can be found here: http://www.wunderground.com/weather/api/d/docs?d=index. That also covers how to perform queries against their api.\n\nSo to get the current conditions you would use the following code:\n\n    wunderground.conditions().request('84111', function(err, response){\n        console.log(response);\n    }\n\nWhere the real fun comes in, however, is when you want more than one resource in a single call. This functionality is crucial to save on weather underground costs. So extending the example, lets also get the forecast:\n\n    wunderground.conditions().forecast().request('84111', function(err, response){\n        console.log(response);\n    }\n\n# Historical Queries\nIf you are willing to pay the hefty fee then this library also provides historical querying as well. Historical queries _cannot_ be chained.\n\n    wunderground.history('20120322', '84111', function(err, response){\n       console.log(response);\n    }\n\nNote that the first field specifies the day in the string format 'YYYYMMDD'. Alternatively you can use a date object for a given day.\n\n#Running Unit Tests\nIn order to run unit tests you need to include a file called \"devkey\" in the test directory. This file must contain only your dev key (no spaces or newlines).\n\nThen simply run this command:\n\n    make test\n    \nIf you have instanbul installed globally you can also run the tests with code coverage results:\n\n    make coverage",
  "readmeFilename": "README.md",
  "_id": "wundergroundnode@0.4.0",
  "_from": "wundergroundnode@latest"
}
